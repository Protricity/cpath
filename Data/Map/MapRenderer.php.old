<?php
/**
 * Created by PhpStorm.
 * User: ari
 * Date: 10/3/14
 * Time: 11:45 PM
 */
namespace CPath\Data\Map;

use CPath\Build\IBuildable;
use CPath\Build\IBuildRequest;
use CPath\Render\HTML\Attribute\IAttributes;
use CPath\Render\HTML\HTMLSequenceMapRenderer;
use CPath\Render\HTML\IRenderHTML;
use CPath\Render\JSON\IRenderJSON;
use CPath\Render\JSON\JSONKeyMapRenderer;
use CPath\Render\JSON\JSONSequenceMapRenderer;
use CPath\Render\Text\IRenderText;
use CPath\Render\Text\TextKeyMapRenderer;
use CPath\Render\Text\TextSequenceMapRenderer;
use CPath\Render\XML\IRenderXML;
use CPath\Render\XML\XMLKeyMapRenderer;
use CPath\Render\XML\XMLMapper;
use CPath\Request\IRequest;
use CPath\Route\IRoutable;

class MapRenderer implements IRenderHTML, IRenderXML, IRenderJSON, IRenderText, IBuildable, IRoutable
{
	private $mMappable;

	/**
	 * @param IKeyMap|ISequenceMap $Mappable
	 */
	public function __construct($Mappable) {
		$this->mMappable = $Mappable;
	}

	/**
	 * Render request as html
	 * @param IRequest $Request the IRequest inst for this render which contains the request and remaining args
	 * @param IAttributes $Attr
	 * @param IRenderHTML $Parent
	 * @return String|void always returns void
	 */
	function renderHTML(IRequest $Request, IAttributes $Attr = null, IRenderHTML $Parent = null) {
		$Mappable = $this->mMappable;
		$Renderer = new HTMLMapRenderer($Request);
		if ($Mappable instanceof IKeyMap) {
			$Mappable->mapKeys($Renderer);

		} elseif ($Mappable instanceof ISequenceMap) {
			$Mappable->mapSequence($Renderer);
		}
	}


	/**
	 * Render request as JSON
	 * @param \CPath\Request\IRequest $Request the IRequest inst for this render which contains the request and remaining args
	 * @return String|void always returns void
	 */
	function renderJSON(IRequest $Request) {
		$Mappable = $this->mMappable;
		$Renderer = new JSONMapRenderer($Request);
		if ($Mappable instanceof IKeyMap) {
			$Mappable->mapKeys($Renderer);

		} elseif ($Mappable instanceof ISequenceMap) {
			$Mappable->mapSequence($Renderer);
		}
	}

	/**
	 * Render request as plain text
	 * @param IRequest $Request the IRequest inst for this render which contains the request and remaining args
	 * @return String|void always returns void
	 */
	function renderText(IRequest $Request) {
		$Mappable = $this->mMappable;
		$Renderer = new TextMapRenderer($Request);

		if ($Mappable instanceof IKeyMap) {
			$Mappable->mapKeys($Renderer);

		} elseif ($Mappable instanceof ISequenceMap) {
			$Mappable->mapSequence($Renderer);
		}
	}

	/**
	 * Render request as xml
	 * @param \CPath\Request\IRequest $Request the IRequest inst for this render which contains the request and remaining args
	 * @param string $rootElementName Optional name of the root element
	 * @param bool $declaration if true, the <!xml...> declaration will be rendered
	 * @return String|void always returns void
	 */
	function renderXML(IRequest $Request, $rootElementName = 'root', $declaration = false) {
		$Mappable = $this->mMappable;
		$Renderer = new XMLMapper($Request, $rootElementName, $declaration);
		if ($Mappable instanceof IKeyMap) {
			$Mappable->mapKeys($Renderer);

		} else if ($Mappable instanceof ISequenceMap) {
			$Mappable->mapSequence($Renderer);
		}
	}

	/**
	 * Handle this request and render any content
	 * @param IBuildRequest $Request the build request inst for this build session
	 * @return void
	 * @build --disable 0
	 * Note: Use doctag 'build' with '--disable 1' to have this IBuildable class skipped during a build
	 */
	static function handleStaticBuild(IBuildRequest $Request) {
		// TODO: Implement handleStaticBuild() method.
	}

	/**
	 * Route the request to this class object and return the object
	 * @param IRequest $Request the IRequest inst for this render
	 * @param Object[]|null $Previous all previous response object that were passed from a handler, if any
	 * @param null|mixed $_arg [varargs] passed by route map
	 * @throws \Exception
	 * @return void|bool|Object returns a response object
	 * If nothing is returned (or bool[true]), it is assumed that rendering has occurred and the request ends
	 * If false is returned, this static handler will be called again if another handler returns an object
	 * If an object is returned, it is passed along to the next handler
	 */
	static function routeRequestStatic(IRequest $Request, Array $Previous=array(), $_arg=null) {
		if(sizeof($Previous) === 0)
			return false;

		$Object = reset($Previous);
		if(!$Object instanceof IMap)
			$Object = new ObjectRenderer($Object);
		$Object->render($Request);
		return true;
	}
}