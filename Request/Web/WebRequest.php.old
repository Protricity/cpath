<?php
/**
 * Created by PhpStorm.
 * User: ari
 * Date: 9/7/14
 * Time: 12:47 PM
 */
namespace CPath\Request\Web;

use CPath\Describable\IDescribable;
use CPath\Request\CLI\CLIMethod;
use CPath\Request\CLI\CommandString;
use CPath\Request\Exceptions\RequestArgumentException;
use CPath\Request\Executable\IPrompt;
use CPath\Request\IRequest;
use CPath\Request\IRequestMethod;
use CPath\Request\MimeType;
use CPath\Request\Validation\PromptException;

class WebRequest implements IRequest
{
    private $mMimeTypes = null;
    /** @var IRequestMethod */
    private $mMethod;
    private $mPath;
    private $mArgs=array();

    public function __construct() {
        $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

        $root = dirname($_SERVER['SCRIPT_NAME']);

        if (stripos($path, $root) === 0)
            $path = substr($path, strlen($root));
        $this->mPath = $path;

        $method = $_SERVER["REQUEST_METHOD"];
        if($method === 'GET')
            return $this->mMethod = new GETMethod();

        return $this->mMethod = new POSTMethod($method);
    }

    /**
     * Matches a route prefix to this request
     * @param $routePrefix '[method] [path]'
     * @return bool true if the route matched
     */
    function match($routePrefix) {
        list($routeMethod, $path) = explode(' ', $routePrefix, 2);

        $requestMethod = $this->mMethod->getMethodName();

        // /user/abc123/
        // /user/:id/
        if ($routeMethod !== 'ANY' && $routeMethod !== $requestMethod)
            return false;

        if(($p = strpos($path, ':')) !== false) {
            $routeArgs = explode('/', trim($path, '/'));
            $i=0;
            foreach(explode('/', trim($this->getPath(), '/')) as $requestPathArg) {
                if(!isset($routeArgs[$i]))
                    return false;

                $routeArg = $routeArgs[$i++];

                if($routeArg[0] == ':') {
                    $this->mArgs[substr($routeArg, 1)] = $requestPathArg;

                } elseif(strcasecmp($routeArg, $requestPathArg) !== 0) {
                    return false;

                }
            }

            if(isset($routeArgs[$i])) // TODO: extra route return false?
                return false;

            if($this->mMethod->getMethodName() === 'GET')
                return $this->mMethod = new GETMethod($this->mArgs);

            return $this->mMethod = new POSTMethod($this->mMethod->getMethodName(), $this->mArgs);

        } else {
            if (strcasecmp($this->getPath(), $path) !== 0)
                return false;

        }

        return true;
    }

    /**
     * Get the Request Method Instance (GET, POST, PUT, PATCH, DELETE, or CLI)
     * @return \CPath\Request\IRequestMethod
     */
    function getMethod() {
        return $this->mMethod;
    }

    /**
     * Get the route path
     * @return String the route path starting with '/'
     */
    function getPath() {
        return $this->mPath;
    }

    /**
     * Get the requested Mime types
     * @return \CPath\Request\MimeType\IRequestedMimeType[]
     */
    function getMimeTypes() {
        if ($this->mMimeTypes)
            return $this->mMimeTypes;

        $accepts = 'text/html';
        if (isset($_SERVER['HTTP_ACCEPT'])) {
            $accepts = $_SERVER['HTTP_ACCEPT'];
        } else if (function_exists('getallheaders')) {
            foreach (getallheaders() as $key => $value)
                if ($key == 'Accept')
                    $accepts = $value;
        }

        $types = array();
        foreach (explode(',', $accepts) as $type) {
            list($type) = explode(';', $type, 2);
            $type = trim($type);
            switch (strtolower($type)) {
                case 'application/json':
                case 'application/x-javascript':
                case 'text/javascript':
                case 'text/x-javascript':
                case 'text/x-json':
                    $types[] = new \CPath\Render\JSON\JSONMimeType($type);
                    break;
                case 'application/xml':
                case 'text/xml':
                    $types[] = new \CPath\Render\XML\XMLMimeType($type);
                    break;
                case 'text/html':
                case 'application/xhtml+xml':
                    $types[] = new \CPath\Render\HTML\HTMLMimeType($type);
                    break;
                case 'text/plain':
                    $types[] = new \CPath\Render\Text\TextMimeType($type);
                    break;
                default:
                    $types[] = new MimeType\UnknownMimeType($type);
            }
        }

        $this->mMimeTypes = $types;
        return $this->mMimeTypes;
    }

    // Static
    private static $mHeaders = null;

//
//    /**
//     * @return IRequestMethod
//     */
//    function getMethod()
//    {
//        $methodName = $_SERVER["REQUEST_METHOD"];
//
//        switch ($methodName) {
//            case 'GET':
//                $Method = new GETRequest();
//                break;
//            case 'POST':
//                $Method = new POSTRequest();
//                break;
//            case 'PUT':
//                $Method = new POSTRequest();
//                break;
//            case 'PATCH':
//                $Method = new POSTRequest();
//                break;
//            case 'DELETE':
//                $Method = new POSTRequest();
//                break;
//            case 'CLI':
//                $Method = new CLIRequest();
//                break;
////                $input = file_get_contents('php://input');
////                $Web->mRawQueryString = $input;
////                if ($Web->getHeaders('Content-Type') === 'application/json') {
////                    $Web->mRequest = json_decode($input, true);
////                } else {
////                    parse_str($input, $request);
////                    $Web->mRequest = $request;
////                }
////                break;
//            default:
////                Log::e(__CLASS__, "Invalid Request Method: " . $Web->mMethod);
////                $Web->mRequest = array();
//        }
//    }
}