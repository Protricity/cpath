<?php
/**
 * Project: CleverPath Framework
 * IDE: JetBrains PhpStorm
 * Author: Ari Asulin
 * Email: ari.asulin@gmail.com
 * Date: 4/06/11 */
namespace CPath;

use CPath\Backend\BuildRequestHandler;
use CPath\Request\IRequestHandler;
use CPath\Request\IRequestHandlerAggregate;
use CPath\Framework\Request\Common\ModifiedRequestWrapper;
use CPath\Request\IRequest;
use CPath\Framework\Response\Exceptions\CodedException;
use CPath\Framework\Response\Interfaces\IResponseCode;
use CPath\Route\RouteNotFoundException;
use CPath\Route\IRouteMap;
use CPath\Route\IRoutable;


class Routes2 implements IRoutable {

    /** @var IRouteMap */
    private $mRoutes;

    public function __construct() {
    }

    /**
     * Returns the route for this IRender
     * @param \CPath\Route\IRouteMap $Map
     */
    function mapRoutes(IRouteMap $Map)
    {
        $this->mRoutes = $Map;
        $Map = $this;
        $path = Config::getGenPath().'routes.gen.php';
        $ret = (include $path);
        if(!$ret) {
            foreach(Config::$Paths as $path => $destination) {
                if($Map->map($path, $destination))
                    break;
            }
        }
    }

    /**
     * @param String $prefix
     * @param String $destination
     * @return bool if true the mapping will discontinue
     */
    function map($prefix, $destination) {
        $Routes = $this->mRoutes;
        return $Routes->mapRoute($prefix, new Routes_LazyRender($destination));
    }

    /**
     * Route request to an IRequestHandler
     * @param IRequest $Request Request is passed by reference and updated with a RequestWrapper
     * @param \CPath\Route\IRoutable $Routable
     * @throws Framework\Response\Exceptions\CodedException
     * @throws \CPath\Route\RouteNotFoundException
     * @return IRequestHandler
     */
    function routeRequest(IRequest &$Request, IRoutable $Routable) {
        $path = $Request->getPath();
        if(($ext = pathinfo($path, PATHINFO_EXTENSION))
            && in_array(strtolower($ext), array('js', 'css', 'png', 'gif', 'jpg', 'bmp', 'ico')))
            throw new CodedException("File request was passed to Script: ", IResponse::HTTP_NOT_FOUND);

        $Selector = new Routes_SelectorMap($Request);
        $newPrefix = '';
        $args = array();

        try {
            $Routable->mapRoutes($Selector);
            $Selector->getMatchedData($Destination, $newPrefix, $args);

            if(!$Destination)
                throw new RouteNotFoundException("Route was not found: " . $path);

        } catch (\Exception $ex) {

            $Request = new ExceptionRequest($Request);

        }
        $Request = new ModifiedRequestWrapper($Request, $args, $newPrefix);

        if($Handler instanceof IRequestHandler) {

        } else if($Handler instanceof IRequestHandlerAggregate) {
            $Handler = $Handler->getHandler($Request);
        } else {
            $Handler = new MimeTypeSwitchWrapper($Handler);
        }

        return $Destination;
    }

    /**
     * Render this request
     * @param \CPath\Request\IRequest $Request the IRequest instance for this render
     * @throws Framework\Response\Exceptions\CodedException
     * @throws \Exception
     * @return String|void always returns void
     */
    function render(IRequest $Request) {
        $Handler = $this->routeRequest($Request, $this);
        $Handler->handleRequest($Request);
    }
}

class Routes_LazyRender implements IRequestHandlerAggregate {
    private $mDestination;
    public function __construct($destination) {
        $this->mDestination = $destination;
    }

    function getInstance() {
        /** @var \CPath\Request\IRequestHandlerAggregate $Inst */
        $Inst = $this->mDestination;
        $Inst = new $Inst;
        return $Inst;
    }

    /**
     * Return an instance of IRender
     * @param IRequest $Request the IRequest instance for this render
     * @return \CPath\Request\IRequestHandler return the renderer instance
     */
    function getHandler(IRequest $Request) {
        return $this->getInstance()
            ->getHandler($Request);
    }
}

class Routes_SelectorMap implements IRouteMap {

    private $mRequest;
    private $mDestination = null;
    private $mDone = false;
    private $mMatchedPrefix = null;
    private $mArgs = array();

    function __construct(IRequest $Request) {
        $this->mRequest = $Request;
    }

    /**
     * @param IRequestHandlerAggregate $Destination
     * @param $prefix
     * @param array $args
     * @internal param String $path
     * @internal param String $method
     */
    function getMatchedData(&$Destination, &$prefix, Array &$args) {
        $Destination = $this->mDestination;
        $args = $this->mArgs;
        $prefix = $this->mMatchedPrefix;
    }

    /**
     * @return IRequestHandlerAggregate
     */
    function getDestination() {
        return $this->mDestination;
    }

    /**
     * Map data to a key in the map
     * @param String $prefix
     * @param IRequestHandlerAggregate $Destination
     * @return bool if true the mapping will discontinue
     */
    function mapRoute($prefix, IRequestHandlerAggregate $Destination)
    {
        if($this->mDone)
            return false;
        list($method, $path) = explode(' ', $prefix, 2);
        $requestPath = $this->mRequest->getPath();
        if($method === 'ANY' || $method == $this->mRequest->getMethodName()) {
            if(strpos($requestPath, $path) === 0) {
                //$method = $this->mRequest->getMethod();
                $argPath = substr($requestPath, strlen($path));
                $argPath = trim($argPath, '/');
                $args = explode('/', $argPath);
                $this->mDone = true;
                $this->mMatchedPrefix = $prefix;
                $this->mArgs = $args;
                if($Destination instanceof Routes_LazyRender)
                    $Destination = $Destination->getInstance();
                $this->mDestination = $Destination;
                //$Destination->render($this->mRequest);

                $prefix2 = $this->mRequest->getMethodName() . ' ' . $this->mRequest->getPath();
                Log::u(__CLASS__, "Matched [{$prefix2}] to [{$prefix}]");
                return true;
            }
        }

        $prefix2 = $this->mRequest->getMethodName() . ' ' . $this->mRequest->getPath();
        Log::v2(__CLASS__, "Could NOT Match [{$prefix2}] to [{$prefix}]");
        return false;
    }


    function tryRenderDefault() {
        throw new \Exception("Route not found: " . $this->mRequest->getMethodName() . ' ' . $this->mRequest->getPath());
    }
}